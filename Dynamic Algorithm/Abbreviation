You can perform the following operation on some string, :

Capitalize zero or more of 's lowercase letters at some index i (i.e., make them uppercase).
Delete all of the remaining lowercase letters in .
Given  queries in the form of two strings,  and , determine if it's possible to make  equal to  by performing the above operation on . If  can be transformed into , print YES on a new line; otherwise, print NO.

Input Format

The first line contains a single integer, , denoting the number of queries. The  subsequent lines describe each query in the following format:

The first line of each query contains a single string, .
The second line of each query contains a single string, .
Constraints

String  consists only of uppercase and lowercase English letters.
String  consists only of uppercase English letters.
Output Format

For each query, print YES on a new line if it's possible to make string  equal to string  by performing the operation specified above; otherwise, print NO.

Sample Input

1
daBcd
ABC
Sample Output

YES










using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;

public class Program
{


    static void Main()
    {
        int t = Ri();  //read number of test case 

        for(int k=0;k<t;k++)
        {
            string a = Rs();
            string b = Rs();
            int n1=a.Length;
            int n2=b.Length;
            bool[] s = new bool[n2 + 1];
            s[0] = true;
            bool l = s[0];
            for(int i=0;i<n1;i++)
            {
                l = s[0];
                for(int j=0;j<n2;j++)
                {
                    if(l)
                    {
                        l = s[j + 1];
                        if(char.IsLower(a[i]))
                        {
                            s[j] = true;
                            if (char.ToUpper(a[i]) == b[j])
                                s[j + 1] = true;
                            else
                                s[j + 1] = false;
                           
                        }
                        else
                        {
                            if (a[i] == b[j])
                                s[j + 1] = true;
                            else
                                s[j + 1] = false;
                        }
                    }
                    else
                    {
                        l=s[j+1];
                        s[j+1]=false;
                    }

                }
                  if (l && char.IsLower(a[i]))
            {
                s[n2] = true;
            }

            }
       

            if (s[n2])
                Console.WriteLine("YES");
            else
                Console.WriteLine("NO");

        }
        

       
    }


    static string Rs()
    {
        return Console.ReadLine().Trim();
    }
    static string[] Rsa()
    {
        return Console.ReadLine().Trim().Split(' ');
    }
    static int Ri()
    {
        return ConvertToInt(Rs());
    }
    static long Rl()
    {
        return ConvertToLong(Rs());
    }
    public static int[] Ria(int n)
    {
        int[] num = new int[n];
        string[] s = Rsa();
        for (int i = 0; i < n; i++)
        {
            num[i] = ConvertToInt(s[i]);
        }
        return num;
    }
    public static int[] Ria()
    {

        string[] s = Rsa();
        int n = s.Length;
        int[] num = new int[n];
        for (int i = 0; i < n; i++)
        {
            num[i] = ConvertToInt(s[i]);
        }
        return num;
    }
    public static int ConvertToInt(string s)
    {
        int y = 0;
        foreach (char c in s)
        {
            y = y * 10 + (c - '0');
        }
        return y;
    }
    public static long ConvertToLong(string s)
    {
        long y = 0;
        foreach (char c in s)
        {
            y = y * 10 + (c - '0');
        }
        return y;
    }
}
