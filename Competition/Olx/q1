Julia is actively buying and selling products on OLX. Now, after being an active user of OLX for more than six years, she decided to build a system to store information about sold products. The system should also be able to query the total number of products sold based on some criteria.

The information of a sell is given in the following format:
Here:
 describes the day of the sell. The value of day is in the range  to  inclusive.
 and  describe the product_id and category_id respectively. The value of product_id is in the range to  inclusive, and the value of category_id is in the range  to  inclusive. The category_id is optional so it could be missing.
 and  describe the state_id and region_id of the person who purchased the product respectively. The value of state_id is in the range  to  inclusive, and the value of region_id is in the range  to  inclusive. The region_id is optional so it could be missing.
The query for the total number of products sold is given in the following format:
Here:
 and  describe the day range for the query. The value of  and  is in the range  to  inclusive. The value of d_end is optional so it could be missing.
 and  describe the product_id and category_id respectively. The value of product_id is in the range to  inclusive, and the value of category_id is in the range  to  inclusive. The category_id is optional so it could be missing. The value of product_id could also be  which means all the products, also in this case no category_id is provided.
 and  describe the state_id and region_id respectively. The value of state_id is in the range  to inclusive, and the value of region_id is in the range  to  inclusive. The region_id is optional so it could be missing. The value of state_id could also be  which means all the states, also in this case no region_id is provided.
The response for the query should be the total number of products sold between the days  and and satisfying the constraints over product_id, category_id, state_id, and region_id given by , , , and  respectively. If the value of  is missing then the response should be the total number of products sold on  only. Note that, to answer any query, the sell information provided before the query are considered only.

Input Format

The first line contains an integer . Each of the next  lines describes either the sell information or products count query.

Constraints

 or 
 or 
Output Format

For each of the products count queries, output the total number of products on a new line.

Sample Input 0

15
Q 1 1.2 2.5
S 1 1.3 2.5
S 1 1.2 2.6
Q 1 1.2 2.6
Q 1 1.2 2
S 2 2 3.5
Q 2 2.3 3.5
S 1 1.2 3.4
Q 1 1 -1
S 3 2.3 6.7
S 3 2.4 6.8
S 2 2 7.8
Q 3 2 6.7
Q 3 2 6
Q 1.3 2 -1
Sample Output 0

0
1
1
0
3
1
2
4
Explanation 0

 
The query is to find the products count sold on day , product_id , category_id , state_id , and region_id . We do not have enough sell information, to answer this query.
 
The query is to find the products count sold on day , product_id , category_id , state_id , and region_id . There is one such product: .
 
The query is to find the products count sold on day , product_id , category_id , state_id , and region_id could have any value. There is one such product: .
 
The query is to find the products count sold on day , product_id , category_id , state_id , and region_id . There are no such products.
 
The query is to find the products count sold on day , product_id , category_id could have any value, state_id  i.e., all the states are considered valid. There are three such products: , , and .
 
The query is to find the products count sold on day , product_id , category_id could have any value, state_id , and region_id . There is one such product: .
 
The query is to find the products count sold on day , product_id , category_id could have any value, state_id , and region_id could have any value. There are two such products:  and .
 
The query is to find the products count sold on days  inclusive, product_id , category_id could have any value, state_id  i.e., all the states are considered valid. There are four such products: , , , and .
Sample Input 1

11
S 1 1 2
S 2 1.1 2
S 2 2.3 1
S 1 2.2 1
Q 1 1 2
Q 1 2 1
Q 2 1 2
Q 2 2 1
Q 1.2 1 -1
Q 1.2 -1 2
Q 1.2 -1 -1
Sample Output 1

1
1
1
1
2
2
4






Solution
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;

public class Program
{


    static int[,,,,] s = new int[100, 10, 5, 7, 26];
    static int[] pass = new int[100];
    static int[,] dateState = new int[100, 7];
    public void addSell(string[] x)

    {
        int[] pId = Array.ConvertAll(x[2].Split('.'), int.Parse);
        int[] sId = Array.ConvertAll(x[3].Split('.'), int.Parse);
        dateState[Convert.ToInt32(x[1]) - 1, sId[0] - 1] += 1;


        if (pId.Length > 1 && sId.Length > 1)
        {
            s[Convert.ToInt32(x[1]) - 1, pId[0] - 1, pId[1] - 1, sId[0] - 1, sId[1] - 1] += 1;
        }
        else if (pId.Length > 1 && sId.Length <= 1)
        {
            s[Convert.ToInt32(x[1]) - 1, pId[0] - 1, pId[1] - 1, sId[0] - 1, 25] += 1;
        }
        else if (pId.Length <= 1 && sId.Length > 1)
        {
            s[Convert.ToInt32(x[1]) - 1, pId[0] - 1, 4, sId[0] - 1, sId[1] - 1] += 1;
        }
        else
        {
            s[Convert.ToInt32(x[1]) - 1, pId[0] - 1, 4, sId[0] - 1, 25] += 1;
        }
    }

    public int count(int d1, int d2, int pid, int cid, int sid, int rid)
    {
        int c = 0;
        for (int i = d1; i <= d2; i++)                   //calclulation for in between data
        {


            if (pid < 0 && sid < 0)
            {


                c += pass[i];


            }
            else if (pid < 0)
            {


                if (rid < 0)
                {

                    c += dateState[i, sid];
                }


                else
                {
                    for (int m = 0; m < 10; m++)                        //product
                    {
                        for (int j = 0; j < 5; j++)                     //category
                        {
                            c += s[i, m, j, sid, rid];
                        }
                    }
                }


            }
            else if (sid < 0)
            {
                for (int n = 0; n < 7; n++)                     //state
                {

                    for (int k = 0; k < 26; k++)            //region
                    {
                        if (cid < 0)
                        {
                            for (int j = 0; j < 5; j++)                 //category
                            {
                                c += s[i, pid, j, n, k];
                            }
                        }
                        else
                        {
                            c += s[i, pid, cid, n, k];
                        }

                    }

                }

            }
            else
            {
                if (cid < 0 && rid < 0)
                {
                    for (int j = 0; j < 5; j++)                 //category
                    {
                        for (int k = 0; k < 26; k++)            //region
                        {
                            c += s[i, pid, j, sid, k];
                        }
                    }

                }
                else if (cid < 0)
                {

                    for (int j = 0; j < 5; j++)                  //category
                    {
                        c += s[i, pid, j, sid, rid];
                    }

                }
                else if (rid < 0)
                {
                    for (int j = 0; j < 26; j++)                 //region
                    {
                        c += s[i, pid, cid, sid, j];
                    }

                }
                else
                {
                    c += s[i, pid, cid, sid, rid];
                }
            }


        }
        return c;
    }

    public int calculate(string[] x)
    {
        int[] dId = Array.ConvertAll(x[1].Split('.'), int.Parse);
        int[] pId = Array.ConvertAll(x[2].Split('.'), int.Parse);
        int[] sId = Array.ConvertAll(x[3].Split('.'), int.Parse);
        if (dId.Length > 1)
        {
            if (pId.Length > 1 && sId.Length > 1)
            {
                return count(dId[0] - 1, dId[1] - 1, pId[0] - 1, pId[1] - 1, sId[0] - 1, sId[1] - 1);
            }
            else if (pId.Length > 1 && sId.Length <= 1)
            {
                return count(dId[0] - 1, dId[1] - 1, pId[0] - 1, pId[1] - 1, sId[0] - 1, -1);
            }
            else if (pId.Length <= 1 && sId.Length > 1)
            {
                return count(dId[0] - 1, dId[1] - 1, pId[0] - 1, -1, sId[0] - 1, sId[1] - 1);
            }
            else
            {
                return count(dId[0] - 1, dId[1] - 1, pId[0] - 1, -1, sId[0] - 1, -1);
            }
        }
        else
        {
            if (pId.Length > 1 && sId.Length > 1)
            {
                return count(dId[0] - 1, dId[0] - 1, pId[0] - 1, pId[1] - 1, sId[0] - 1, sId[1] - 1);
            }
            else if (pId.Length > 1 && sId.Length <= 1)
            {
                return count(dId[0] - 1, dId[0] - 1, pId[0] - 1, pId[1] - 1, sId[0] - 1, -1);
            }
            else if (pId.Length <= 1 && sId.Length > 1)
            {
                return count(dId[0] - 1, dId[0] - 1, pId[0] - 1, -1, sId[0] - 1, sId[1] - 1);
            }
            else
            {
                return count(dId[0] - 1, dId[0] - 1, pId[0] - 1, -1, sId[0] - 1, -1);
            }
        }

    }

    public void Solve()
    {

        List<int> e = new List<int>();

        int n = Convert.ToInt32(Console.ReadLine());

        for (int i = 0; i < n; i++)
        {
            string[] x = Console.ReadLine().Split(' ');

            if (x[0] == "S")
            {
                pass[Convert.ToInt32(x[1]) - 1] += 1;
                addSell(x);
            }
            else
            {

                Console.WriteLine(calculate(x));
                //  e.Add(calculate(x));

            }


        }




    }



    protected static TextReader reader;

    static void Main()
    {


        //  reader = new StreamReader(Console.OpenStandardInput());


        //try
        //{
        new Program().Solve();

        //}
        //catch (Exception ex)
        //{
        //    Console.WriteLine(ex);
        //}
        // reader.Close();

    }




    private static Queue<string> currentLineTokens = new Queue<string>();
    private static string[] ReadAndSplitLine() { return reader.ReadLine().Split(new[] { ' ', '\t', }, StringSplitOptions.RemoveEmptyEntries); }
    public static string rS() { while (currentLineTokens.Count == 0) currentLineTokens = new Queue<string>(ReadAndSplitLine()); return currentLineTokens.Dequeue(); }
    public static char[] rCA() { while (currentLineTokens.Count == 0) currentLineTokens = new Queue<string>(ReadAndSplitLine()); return currentLineTokens.Dequeue().ToCharArray(); }
    public static int rI() { return int.Parse(rS()); }
    public static long rL() { return long.Parse(rS()); }
    public static double rD() { return double.Parse(rS(), CultureInfo.InvariantCulture); }
    public static int[] rIA() { return ReadAndSplitLine().Select(int.Parse).ToArray(); }
    public static long[] rLA() { return ReadAndSplitLine().Select(long.Parse).ToArray(); }
    public static double[] rDA() { return ReadAndSplitLine().Select(s => double.Parse(s, CultureInfo.InvariantCulture)).ToArray(); }

}


