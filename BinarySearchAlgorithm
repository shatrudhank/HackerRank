  
     public  static int  BinarySearchDescending(int[] s,int e)
    {

     
        int n = s.Length-1;
        int i = 0,m=0;
        while (i<=n)
        {
           m = (i + n) / 2;            
           if(s[m]>e)
            {
                i = m + 1;
            }
            else
            {
                n = m - 1;
            }
          

        }
        return i;
    }
    
   

    ---------------------------------------------------------------------------------------------------------------------------------------
    
  public static int BinarySearchAscending(int[] s, int e)
        {


            int n = s.Length - 1;
            int i = 0, m = 0;
            while (i <= n)
            {
                m = (i + n) / 2;
                if (s[m] < e)
                {
                    i = m + 1;
                }
                else
                {
                    n = m - 1;
                }


            }
            return i;
        }
        ---------------------------------------------------------------------------------------------------
        
         public static bool IsAvailable(int[] s, int e)
        {


            int n = s.Length - 1;
            int i = 0, m = 0;
            bool status = false;
            while (i <= n)
            {
                m = (i + n) / 2;
                if (s[m] == e)
                {
                    status = true;
                    break;
                }
                else if(s[m]<e)
                {
                    i = m +1;
                }
                else
                {
                    n = m - 1;
                }
             


            }
            return status;
        }
        
           static int BinarySearch(int[] arr,int f,int l,int val)
    {
      int  m=(f+l)/2;
      if(f<l)
      {
          if(arr[m]==val)
          {
        	  return m; 
          }
          else if(arr[m]>val)
           {
        	   l=m-1;
           }
           else if(arr[m]<val)
            {
        	   f=m+1;
           }
    	   return BinarySearch(arr, f, l, val);
      }

    	  return f;
    }
